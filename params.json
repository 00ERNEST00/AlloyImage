{"google":"","tagline":"an image processing lib based on html5","note":"Don't delete this file! It's used internally to help with page regeneration.","name":"Alloyphoto","body":"### Welcome to AlloyPhoto.\r\nAlloyPhoto是一个基于html5技术的JS库，集成了一些方便快捷的图像处理API，您可以将它引用到您的网页中，结合css3等技术，做出一些之前无法做到的优美效果，或者，提供一个用JS编写的在线图像处理工具等。\r\n### 特点\r\n1.图层功能，提供图层的添加，删除，交换图层顺序等功能，且包含与PS相对应的17种图层混合模式<br />\r\n2.图像的基本调节功能，包括亮度、对比度，色相、饱和度、明度调节<br />\r\n3.多种滤镜功能，去色、反相、高斯模糊、锐化、浮雕效果、查找边缘、马赛克、腐蚀等<br />\r\n4.处理后文件的保存，处理完成之后，可以将文件输出为base64形式间接使用和保存<br />\r\n5.高级组合效果，如素描，lomo，hrd，复古，素描，油画<span style=\"color:#ccc\">(功能尚未添加）</span>\r\n如一个素描效果的实现\r\n```\r\nvar img = new Image();\r\nimg.src = \"pic.jpg\";\r\nimg.onload = function(){\r\n      //素描效果\r\n      psLib(this).act(\"灰度处理\").add(//添加一个图层上去\r\n            psLib(this).act(\"灰度处理\").act(\"反色\").act(\"高斯模糊\",5) , \"颜色减淡\"  \r\n      ).act(\"锐化\").show();\r\n};\r\n```\r\n### API参考\r\n####初始化一个psLib对象<br />\r\n#####用img创建一个对象（图层）<br />\r\npsLib(img) 或  new psLib(img)<br />\r\nimg可以是new Image()创建的对象，也可以是DOM树中的image元素，但在创建psLib对象前确保 img已经被onload成功，否则可能导致抛出异常\r\n```\r\nvar img = document.getElementsByTagName(\"img\")[0];\r\nimg.onload = function(){\r\n     var psLibObj = psLib(this);\r\n};\r\n```\r\n#####创建一个纯色或透明的对象（图层）<br />\r\npsLibObj psLib(Number width,Number height,String fillStyle)<br />\r\n其中，width是图层宽度，height是图层高度，fillStyle是填涂的颜色，可以是#233322型，也可以是rgb(23,23,23)，甚至可以是rgba(23,23,23,0),或\"red\"这样的字符串<br />\r\n\r\n一个psLib对象可以看做是一个图层，也可以看做是一个工作文件<br />\r\n\r\n####act\r\n说明：对单个图层进行效果处理<br />\r\n语法：psLibObj act(String method,Args arg,...)<br />\r\n其中 method有以下可选参数<br />\r\n<table>\r\n    <tr>\r\n       <td>参数</td><td>     功能</td><td>附加参数</td><td>用法示例</td>\r\n    </tr>\r\n    <tr>\r\n        <td>亮度</td> <td>调节亮度与对比度 </td><td>亮度，对比度</td><td>act(\"亮度\",10,20)</td>\r\n    </tr>\r\n    <tr>\r\n        <td>色相/饱和度调节 </td> <td> 调节图像色相与饱和度  </td> <td>  色相，饱和度，明度，是否着色模式(可选) </td> <td>   act(\"色相/饱和度调节\",10,0,10,true)</td>\r\n   </tr>\r\n <tr>\r\n        <td>曲线</td> <td> 调节灰度曲线  </td> <td>  节点x的坐标数组，节点y的坐标数组 </td> <td>   act(\"曲线\",[0,65,128,255], [0,120,220,255])</td>\r\n   </tr>\r\n\r\n   <tr>\r\n        <td>灰度处理</td> <td>将图像处理为灰度图像 </td><td>无</td><td>act(\"灰度处理\")</td>\r\n    </tr>\r\n   <tr>\r\n        <td>灰度阈值</td> <td>将图像二值化 </td><td>阈值</td><td>act(\"灰度阈值\",128)</td>\r\n    </tr>\r\n\r\n   <tr>\r\n        <td>反色</td> <td>将图像进行反相操作 </td><td>无</td><td>act(\"反色\")</td>\r\n    </tr>\r\n   <tr>\r\n        <td>高斯模糊</td> <td>将图像进行高斯模糊 </td><td>模糊大小</td><td>act(\"高斯模糊\",10)</td>\r\n    </tr>\r\n   <tr>\r\n        <td>锐化</td> <td>将图像进行锐化 </td><td>锐化大小</td><td>act(\"锐化\",10)</td>\r\n    </tr>\r\n   <tr>\r\n        <td>马赛克</td> <td>将图像进行马赛克处理 </td><td>马赛克大小</td><td>act(\"马赛克\",10)</td>\r\n    </tr>\r\n   <tr>\r\n        <td>浮雕效果</td> <td>将图像进行浮雕效果处理 </td><td>无</td><td>act(\"浮雕效果\")</td>\r\n    </tr>\r\n   <tr>\r\n        <td>腐蚀</td> <td>将图像进行腐蚀效果处理 </td><td>无</td><td>act(\"腐蚀\")</td>\r\n    </tr>\r\n<tr>\r\n        <td>添加杂色</td> <td>在图像上添加杂色 </td><td>杂色数量</td><td>act(\"添加杂色\",10)</td>\r\n    </tr>\r\n\r\n</table>\r\n\r\n####add\r\n说明：合并一个图层到本图层上去<br />\r\n语法：psLibObj add(psLibObj new[,String model [,Number dx,Number dy,String alpha,String channel]])<br />\r\n本方法将会进行图层合并操作，会将新图层new以高于本图层的顺序，以model的混合模式，以相对本图层左上角为坐标原点的dx,dy偏移量合并到本图层，并返回合并后的图层对象<br />\r\n参数说明：第一个参数为必须参数，其他全部为可选参数，并且除了第一个必须要是图层对象外，其他参数位置全部可以随意调（alloyPhoto很多api参数很灵活)<br />\r\nmodel的模式有17种，其效果和Photoshop中效果对应<br />\r\n\"正常\",\"颜色减淡\",\"变暗\",\"变亮\",\"正片叠底\",\"滤色\",\"叠加\",\"强光\",\"差值\",\"排除\",\"点光\",\"颜色加深\",\"线性加深\",\"线性减淡\",\"柔光\",\"亮光\",\"线性光\",\"实色混合\" <br/>\r\nalpha代表透明度，要求为Sring类型，并且需要带%号，比如\"20%\",\"0%\",\"100%\"（可以不写，默认值)<br />\r\ndx,dy分别为Number类型<br />\r\nchannel为混合通道，表示以哪些通道混合，比如\"RB\"，代表混合R、B通道<br />\r\n\r\n用例：\r\n\r\n下面的例子表示m2图层反色处理后，和m图层以正常（可以不写）的混合模式，20%的透明度，只混合B通道的选项进行合并操作\r\n```\r\n//...some code here\r\nm.add(\r\n   m2.act(\"反色\") , \"正常\",\"20%\",\"B\"\r\n).replace(this);\r\n```\r\n\r\n####show\r\n说明：将当前图层以canvas元素显示出来\r\n语法：psLibObj show([String cssSelector[,Boolean isFast]])<br />\r\n设定了cssSelector之后，将会在cssSelector元素内追加canvas元素显示图层，如果没有cssSelector，将会在文档后追加canvas元素显示图层，isFast是快速显示标记，如果设定isFast为true，则图像将会以快速模式显示出来，可用于中间处理过程（图像品质降低)<br />\r\n\r\n####replace\r\n说明：将本图像替换image显示\r\n语法：psLibObj replace(Image img)<br />\r\n使用该方法后，img将会被本图像代替<br />\r\n```\r\nvar img = document.getElementsByTagName(\"img\")[0];\r\nimg.loadOnce(function(){//loadOnce添加为alloyPhoto添加\r\n      /*\r\n         防止用onload事件注册后  replace会改变img的src导致onload事件再次触发形成循环\r\n      */\r\n      var ps = psLib(this);\r\n      ps.act(\"反色\").replace(this);\r\n});\r\n```\r\n####clone\r\n说明：复制图层对象<br />\r\n语法：psLibObj clone()<br />\r\n使用该方法后，将会返回一个图层副本。我们都知道，基于js对象都是引用传递，所以，此方法构造一个与原图层无关的图层副本<br />\r\n如 var layer2 = layer.clone();\r\n\r\n####view\r\n说明：预览模式下处理<br />\r\n语法：psLibObj view(String method,Args arg,...)<br />\r\n此方法和act很相似，但此方法可以记录view之前的状态，配合excute和cancel使用来执行或取消处理\r\n\r\n####excute\r\n说明：执行预览模式下的操作<br />\r\n语法：psLibObj excute()\r\n####cancel\r\n说明：取消预览模式下所做的处理<br />\r\n语法：psLibObj cancel()\r\n\r\n###多图层操作\r\n\r\n####addLayer\r\n说明：添加一个图层到本图层上去，不进行合并操作，不会对本图层产生影响<br />\r\n语法：psLibObj addLayer(psLibObj new[,String model [,Number dx,Number dy]])<br />\r\naddLayer方法与add的方法不同出在于，add方法会将new图层合并到本图层去，返回一个合并后的图层，addLayer方法会将一个图层挂载到本图层，返回的对象为一个复合的图层，不会本图层和new图层，但对new 图层的后续处理会影响复合图层的显示，add方法则不会<br />\r\n####swap\r\n说明：交换两个图层的顺序<br />\r\n语法：psLibObj swap(Number indexA,Number indexB)<br />\r\nindexA、indexB分别表示图层顺序所代表的图层，使用该方法后，将会改变两图层的顺序\r\n\r\n####deleteLayers\r\n说明：删除一个或多个图层<br />\r\n语法：psLibObj deleteLayers(Array indexArr)<br />\r\n删除图层顺序为indexArr数组中的图层\r\n\r\n###demo\r\n1.鼠标滑上变彩色，移开灰度\r\n```\r\nvar pics = document.getElementsByTagName(\"img\");\r\n\r\nfor(var i = 0;i < pics.length;i ++){\r\n  pics[i].loadOnce(function(){\r\n      /*\r\n         防止用onload事件注册后  replace会改变img的src导致onload事件再次触发形成循环\r\n      */\r\n\r\n      var picTranseObj = psLib(this);//创建一个psLib对象\r\n      var origin = picTranseObj.clone();//克隆原始对象做为副本\r\n\r\n      var grayPic = picTranseObj.act(\"灰度处理\");//灰度后的图像\r\n      grayPic.replace(this);\r\n\r\n      this.onmouseover = function(){\r\n          origin.replace(this);//显示原始图像\r\n      };\r\n\r\n      this.onmouseout = function(){\r\n          grayPic.replace(this);//显示灰度图像\r\n      };\r\n\r\n  });\r\n}\r\n```\r\n2.lomo风格图像\r\n```\r\nvar pics = document.getElementsByTagName(\"img\");\r\n\r\nfor(var i = 0;i < pics.length;i ++){\r\n  pics[i].loadOnce(function(){\r\n      /*\r\n         防止用onload事件注册后  replace会改变img的src导致onload事件再次触发形成循环\r\n      */\r\n\r\n\r\n      var m = psLib(this).add(\r\n        psLib(this) , \"滤色\"\r\n      ).add(\r\n        psLib(this) , \"柔光\"\r\n      );\r\n      \r\n      var m2 = m.clone();\r\n\r\n      m.add(\r\n        m2.act(\"反色\") , \"正常\",\"20%\",\"B\"\r\n      ).replace(this);\r\n\r\n\r\n\r\n  });\r\n}\r\n```\r\n3.复古风格\r\n```\r\nvar pics = document.getElementsByTagName(\"img\");\r\n\r\nfor(var i = 0;i < pics.length;i ++){\r\n  pics[i].loadOnce(function(){\r\n      /*\r\n         防止用onload事件注册后  replace会改变img的src导致onload事件再次触发形成循环\r\n      */\r\n      var m = psLib(this).act(\"灰度处理\").add(\r\n        psLib(this.width,this.height,\"#808080\").act(\"添加杂色\").act(\"高斯模糊\",4).act(\"色相/饱和度调节\",32,19,0,true),\"叠加\"\r\n      ).show();\r\n\r\n\r\n\r\n  });\r\n}\r\n```\r\n\r\n更多效果及API后续添加，敬请期待"}